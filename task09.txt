**Отчёт по аудиту производительности сайта**

**Сайт для анализа:** [https://www.wildberries.ru](https://www.wildberries.ru)

---

### Задание 1. Lighthouse-анализ

**Настройки анализа:**

* Устройство: Mobile
* Категории: Performance, Best Practices, Accessibility

**Основные метрики Web Vitals:**

* LCP: 5.2s (высокое значение, влияет на скорость отображения главного содержимого)
* FID: 38ms (в пределах нормы)
* CLS: 0.18 (умеренно высокий показатель нестабильности)

**Основные проблемы:**

1. **Медленная загрузка крупных изображений** — PNG и JPEG высокого разрешения без адаптации.
2. **Блокирующий JavaScript** — большие скрипты не загружаются асинхронно.
3. **Задержки при рендере из-за нестабильной разметки** — динамические элементы сдвигают контент при загрузке.

**Второстепенные проблемы:**

* Отсутствует lazy loading для изображений;
* CSS-файлы не минифицированы;
* Слишком много внешних JS-библиотек;
* Не используется формат WebP для картинок;
* Отсутствует предварительная загрузка ключевых шрифтов;
* Не оптимизирован порядок подключения стилей.

**Предложенные решения:**

* Использовать `loading="lazy"` для картинок;
* Преобразовать изображения в WebP;
* Асинхронно загружать сторонние JS;
* Минифицировать CSS и объединить файлы;
* Добавить `font-display: swap` и preload для шрифтов;
* Установить адаптивные размеры для всех медиа-элементов.

---

### Задание 2. Performance-анализ

**Результаты записи производительности:**

* **Loading:** \~3.2s — основной скачок трафика от изображений и стилей.
* **Scripting:** 2.1s — большая нагрузка от пользовательского JS и рекламы.
* **Rendering:** 1.2s — отложенный отрисовкой контент сдвигается из-за рекламных баннеров.
* **Recalculate Style:** происходил несколько раз из-за анимаций и DOM-операций.

**Вывод:** требуется оптимизировать порядок подключения ресурсов, отложить загрузку рекламы, а также уменьшить количество DOM-операций в runtime.

---

### Задание 3. Оптимизация рендеринга (обоснование)

Для ускорения рендеринга сайта Wildberries следует:

1. Перевести изображения на формат WebP, чтобы снизить вес страницы.
2. Использовать `loading="lazy"` для снижения количества сразу загружаемых ресурсов.
3. Убрать блокирующий JavaScript: вынести подключение скриптов в `defer` или `async`.
4. Минифицировать и объединить CSS-файлы, а также использовать критический CSS.
5. Добавить `preload` для шрифтов, а также `font-display: swap`, чтобы избежать задержек при рендере текста.
6. Оптимизировать анимации и убрать избыточные DOM-операции, приводящие к Recalculate Style.

Эти меры сократят LCP и CLS, улучшат общее время загрузки и стабильность интерфейса.

---

### Задание 4. Реализация (не выполнено)

Код проекта закрыт, внесение изменений невозможно.

---

**Приложения:**

* Скриншоты и PDF-отчёты Lighthouse и Performance находятся в приложенной директории /report
